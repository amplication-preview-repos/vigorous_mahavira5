/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Product as PrismaProduct,
  Category as PrismaCategory,
  Order as PrismaOrder,
  Stock as PrismaStock,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ProductServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ProductCountArgs, "select">): Promise<number> {
    return this.prisma.product.count(args);
  }

  async products<T extends Prisma.ProductFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindManyArgs>
  ): Promise<PrismaProduct[]> {
    return this.prisma.product.findMany<Prisma.ProductFindManyArgs>(args);
  }
  async product<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<PrismaProduct | null> {
    return this.prisma.product.findUnique(args);
  }
  async createProduct<T extends Prisma.ProductCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductCreateArgs>
  ): Promise<PrismaProduct> {
    return this.prisma.product.create<T>(args);
  }
  async updateProduct<T extends Prisma.ProductUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductUpdateArgs>
  ): Promise<PrismaProduct> {
    return this.prisma.product.update<T>(args);
  }
  async deleteProduct<T extends Prisma.ProductDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductDeleteArgs>
  ): Promise<PrismaProduct> {
    return this.prisma.product.delete(args);
  }

  async uploadPhoto<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaProduct> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "photo";
    const photo = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        photo: photo as InputJsonValue,
      },
    });
  }

  async downloadPhoto<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<FileDownload> {
    const { photo } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      photo as unknown as LocalStorageFile
    );
  }

  async deletePhoto<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<PrismaProduct> {
    const { photo } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      photo as unknown as LocalStorageFile
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        photo: Prisma.DbNull,
      },
    });
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }

  async getStock(parentId: string): Promise<PrismaStock | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .stock();
  }
}
